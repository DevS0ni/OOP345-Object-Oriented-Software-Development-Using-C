/*
-----------------------------------------------------------------------------
 Author      : Dev Soni - dasoni4@myseneca.ca
 Student #   : 130759210

 Workshop 9
-----------------------------------------------------------------------------
*/

The use of binary files in this workshop brought notable benefits, particularly when handling a substantial amount of data â€“ precisely 500,000 records in this case. Working with binary files facilitated faster reading and writing operations compared to text files. The succinct implementation, requiring just two lines of code for reading and writing (lines 71, 75 & 171, 172), contributed to efficiency. Additionally, the binary format resulted in smaller file sizes compared to their text counterparts.

Binding a function to its arguments proved crucial in this workshop, offering flexibility in modifying existing functions for enhanced efficiency or alternative approaches. Specifically, in this context, binding arguments allowed the computation functions to be called in separate threads with the assistance of placeholders and previously calculated values (e.g., avg) in lines 123 and 132. This approach facilitated parallel processing and contributed to improved performance.

The advantages of using multiple threads were evident in the workshop, especially when dealing with a large array of data. The implementation of multi-threading, seen in lines 117-137, involved creating vectors of threads and distributing the array into smaller chunks for parallel processing. The use of multiple threads significantly accelerated computation times, especially noticeable on larger datasets. However, in observations on a remote server (Matrix), the impact of multiple threads was hindered by potential queuing, resulting in longer processing times.

In evaluating the computation times with different values for the number of threads and sleep intervals, it became evident that more threads generally led to reduced processing times. While the specific impact of sleep intervals varied, the overall trend was consistent. On a local machine, the advantages of parallel processing were pronounced, especially when handling larger datasets. However, on a server like Matrix, where queuing might occur, the performance gains were not as pronounced.

In conclusion, the workshop underscored the utility of binary files for efficiency in handling large datasets, the importance of binding functions to arguments for enhanced flexibility, and the advantages of employing multiple threads for parallel processing, resulting in significant improvements in computation times.



