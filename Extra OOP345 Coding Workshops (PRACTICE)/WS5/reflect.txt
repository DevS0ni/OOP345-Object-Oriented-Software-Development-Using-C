/**********************************************************************************************************************************
				reflect.txt
Full Name  : Soni Dev Alpeshbhai.
***********************************************************************************************************************************/

The below questions refer to the questions asked in the reflection of the WorkShop.

The compiler changes a lambda expression into a functor (class), however a functor class lacks a context option like a lambda does, 
every required parameters must be provided directly. As a result, lambda expressions are more usable when context variables are required.

Reference from the code:
	sdds::SpellChecker::SpellChecker(const char* filename)
	{
		ifstream wordFile(filename);
		if (wordFile)
		{
			string line{};
			size_t count = 0u;
			
			while (wordFile && count < WORD_COUNT)
			{
				getline(wordFile, line);
				readWords(line, inappropriateWords[count], appropriateWords[count]);
				count++;
			}
		}
		else
		{
			throw "Bad file name!";
		}
	}
	
However, instead of throwing an exception I would just make every Spellcheckers member variables pointing to a sape empty state,
calling the default constructor: The Reference from the code is as below:
	sdds::SpellChecker::SpellChecker(const char* filename) : SpellChecker()
	{
		ifstream wordFile(filename);
		if (wordFile)
		{
			string line{};
			size_t count = 0u;
			
			while (wordFile && count < WORD_COUNT)
			{
				getline(wordFile, line);
				readWords(line, inappropriateWords[count], appropriateWords[count]);
				count++;
			}
		}
	}

Regarding Book and Movie, it is better to make a virtual parent class for them both called "Media" that would have loaded the first three bits of information from the file before the classes start reading the other information that is very specific to them.

The default constructor is actually required for any class, if we dont provide one the compiler will automatically generate one.
I have explicitly asked the compiler to do so in the code itself:
		Book() = default;
		Movie() = default;
Its better to do so because I have initialized my member variables to a safe emppty state at creation time:
	class Movie
	{
		std::string movieName{};
		size_t releaseYear{};
		std::string movieDescription{};
If I havent done that so I would need to have a default constructor that initializes those variables to a safe empty state.